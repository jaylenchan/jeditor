@use 'sass:map';

$namespace: 'jeditor';
// ================================= basic color ============================
$colors: () !default;
$colors: map.deep-merge(
	(
		success: (
			1: #e8fff3,
			2: #b2f5d4,
			3: #80eaba,
			4: #52e0a4,
			5: #28d592,
			6: #00c881,
			7: #00aa74,
			8: #008c64,
			9: #006c51,
			10: #004d3c,
		),
		warning: (
			1: #fff3e8,
			2: #fedcbf,
			3: #fcc298,
			4: #fea571,
			5: #fc8748,
			6: #fb6621,
			7: #cc4812,
			8: #a53109,
			9: #781f03,
			10: #4d0e00,
		),
		error: (
			1: #ffede8,
			2: #ffd4c9,
			3: #ffb8aa,
			4: #ff9a8a,
			5: #ff796b,
			6: #ff584c,
			7: #c7312d,
			8: #a61919,
			9: #79090d,
			10: #4d0005,
		),
		info: (
			1: #f4f6f9,
			2: #eceef3,
			3: #dbdee4,
			4: #ced2d9,
			5: #bec2cc,
			6: #a1a7b2,
			7: #828a99,
			8: #626773,
			9: #303540,
			10: #191d26,
		),
		white: (
			1: #ffffff,
		),
		black: (
			1: #000000,
		),
	),
	$colors
);

// create a css var name
// list = (color, type, level)
@function createVarName($list) {
	$colorName: '--' + $namespace;

	@each $i in $list {
		$colorName: $colorName + '-' + $i;
	}

	@return $colorName;
}

// define css color var if given colors map
// --je-color-success-1: #e8fff3;
@mixin define-color-var($colors) {
	:root {
		@each $type, $colorMap in $colors {
			@each $level, $color in $colorMap {
				#{createVarName((color,$type,$level))}: $color;
			}
		}
	}
}

// use color by type + level
// type: success | warning | error | info
// level: 1 - 10
// useColor(success,1)
@function useColor($type, $level) {
	@return var(#{createVarName((color, $type, $level))});
}

// ================================= color status ============================
$typeStatusMap: () !default;
$typeStatusMap: map.deep-merge(
	(
		success: (
			normal: 6,
			hover: 5,
			active: 7,
			disabled: 2,
		),
		warning: (
			normal: 6,
			hover: 5,
			active: 7,
			disabled: 2,
		),
		error: (
			normal: 6,
			hover: 5,
			active: 7,
			disabled: 2,
		),
		info: (
			normal: 6,
			hover: 5,
			active: 7,
			disabled: 2,
		),
	),
	$typeStatusMap
);

// define css color status var
// --je-color-success-normal : var(--je-color-success-6)
@mixin define-color-status-var($typeStatusMap) {
	:root {
		@each $type, $statusMap in $typeStatusMap {
			@each $status, $level in $statusMap {
				#{createVarName((color,$type,$status))}: useColor($type, $level);
			}
		}
	}
}

$shadows: (
	1: (
		0px 1px 2px rgba(0, 0, 0, 0.22),
		0px 1px 3px rgba(0, 0, 0, 0.09),
	),
	2: (
		0px 0px 2px rgba(0, 0, 0, 0.12),
		0px 2px 3px rgba(0, 0, 0, 0.24),
		0px 2px 6px rgba(0, 0, 0, 0.1),
		inset 0px 0px 0px 1px useColor(white, 1),
	),
	3: (
		0px 1px 2px rgba(0, 0, 0, 0.25),
		0px 2px 6px rgba(0, 0, 0, 0.14),
		inset 0px 0px 0px 1px useColor(white, 1),
	),
	4: (
		0px 0px 3px rgba(0, 0, 0, 0.16),
		0px 5px 4px rgba(0, 0, 0, 0.16),
		0px 2px 16px rgba(0, 0, 0, 0.06),
		inset 0px 0px 0px 1px useColor(white, 1),
	),
);

@mixin define-box-shadow($shadows) {
	:root {
		@each $level, $shadow in $shadows {
			#{createVarName((shadow,$level))}: $shadow;
		}
	}
}

@function useShadow($level) {
	@return var(#{createVarName((shadow, $level))});
}
